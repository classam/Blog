---
title: Potater Details
created: '2010-01-25T12:18:29+00:00'
visible: true
categories:
- Misc
content_type: html
content: ! "Okay, so, last night, I launched <a href=\"http://potater.com\">Potater</a>.\n\nNow
  it's time to talk about the <em>completely ridiculous</em> technical decisions I
  made when I was developing Potater. \n\n<h3>There's No Database</h3>\n\nThe entire
  site is stored as a ball of JSON files. Heck, you can see them <a href=\"http://potater.com/json/\">here</a>
  if you like. \n\nHere's a <a href=\"http://www.youtube.com/watch?v=U5kLJX5G8P4\">tweeest</a>,
  though - all of the text is stored as '<a href=\"http://docutils.sourceforge.net/rst.html\">restructured
  text</a>' - this is because I edit the JSON files by hand (vim + screen, the <em>man's
  man's</em> editor) and I want them to remain human-readable and human writable.
  \n\nHere are some benefits of the flat-file JSON approach: \n\n<h4> It's self-describing.
  </h4>\nThese files contain enough data for you to easily tell what goes where. Each
  file corresponds with a Top 10 page, and the contents should be so obvious that
  I don't even need to tell you how it works. \n\n<h4> It's an API </h4>\nThese files
  also constitute a workable API for toodling around with the site.  Look, all of
  the data on the site, you can download the JSON files with wget and fiddle with
  them on your own.  Want a listing of the number one entries for the last three weeks?
  Why not! JSON parsers are built into or libraries for just about every important
  language, now, so converting one of these files to an object is trivially easy.\n\n<h4>
  Backup is trivial. </h4>\nOkay, so, backing up a database isn't <em>that</em> hard.
  \ Backing up THIS database, though, is almost free it's so easy.  Just ... get the
  files. In fact, that plays into my next feature...\n\n<h4> Entire DB Under Version
  Control </h4>\nThe entire database is under version control, right next to the code.
  \ Rolling back changes to the data is no problem, captain! Backup is as easy as
  checking the whole thing out from a different computer. \n\nOf course, there are
  a few features of a database that I don't get, but let's consider those:\n\n<h4>
  Security </h4>\n\nMy entire database only has file-level security.  Well, all of
  the files are downloadable anyways. I don't care if people can get at my data. It's
  not a problem. \n\n<h4> SQL </h4>\n\nFor any query I want to make, I have to write
  a function that processes all of the JSON files that I want to look at.  This is
  pretty trivial given a small, well-defined set of data (like this), but I wouldn't
  want to give up SQL queries for anything that might require several tables or joins
  - of course, I could also look at CouchDB, which <a href=\"http://yangman.ca/blog/\">yangman
  the fucking prolific hacker</a> has recommended. \n\n<h4> Data Integrity/Transactions
  </h4>\n\nThe data is read-only, my friends. Don't need to worry about data integrity
  or transactions.\n\n\n\n<h3>It's Entirely Static</h3>\n\nYes, the entire website
  is <em>Python-generated HTML</em>.  The Python reads the JSON and spits out all
  of the required HTML and the Atom feed.  It's pretty flexible about what can be
  _IN_ the JSON, so long as there's something in there (only trouble is, the 'default'
  values look pretty default on a website.)  When you hit the front-page, it's just...
  well, Apache serving up HTML. I hear it does that pretty well. \n\nThere are benefits
  to this: \n\n<h4> Static pages are lightning fast. </h4>\nThere's no code-interpretation
  phase.  The site just fetches the site and spits it out at you, as fast as it can.
  \n\n<h4> Caching is trivial. </h4>\nThe whole site is cached HTML, so ...well, there's
  not a lot to worry about, cache-wise. A few HTTP cache directives (I haven't even
  installed <em>mod_expires</em> yet, that's a next step) should be enough to keep
  the site peppy under just about any sort of load. Throw in some gzipping and I've
  pretty much done everything I need to keep the site humming along.\n\nIn order to
  pull this sort of caching off with a dynamic site, some serious moustache-heavy
  caching has to be done. \n\n<h4> Deployment is trivial.</h4>\nI could take the ball
  of generated .html and plunk it down anywhere on the internet.  All but a few of
  the links (in the Atom feed) are relative, so it should work anywhere. \n\n<h4>
  No Broken Site. </h4>\nIn the current configuration of the site, if anything goes
  wrong in the html-generation phase, it keeps everything that has been generated
  so-far in a 'temp' directory and leaves the 'release' version of the generated site
  alone. So errors should rarely propagate all the way to the front page - although
  the odd rendering error has been known to make it through. (I don't always look
  at the 'temp' directory before I push it to release, because I'm a lazy schmoe.)
  \n\n<h4> Small Source </h4>\nThe technologies I used lend themselves to rapid dev
  and small code signatures - the whole codebase, stylesheet included, weighs less
  than 19kb. \n\nThere's also a distinct penalty:\n\n<h4> No dynamic features. </h4>\n\nMy
  site has no dynamic features whatsoever. Not a single one. Nothing server-side happens
  at all when you roam potater. So let's look at the one dynamic feature that every
  blog, article, Tom, Dick and Harry has had embedded into their site since 1999:
  Comments. \n\nOh, wait, I can do that with Javascript. The Disqus comment system,
  by focussing <em>entirely</em> on comments and <em>nothing else</em> has quickly
  become one of the slickest comment systems on the internet.  I don't like storing
  my comments in the cloud, but unless an open-source competitor to Disqus pops up,
  I barely have a choice.  On top of that, it means that all of the dynamic ugliness
  happens on Disqus's side of the equation. \n\nLet's look at a few more thingamapoopers:
  \n\n<h3>There are only two images on the page. </h3>\n\nEverything else is CSS.
  And that bulky 120kb background image is going right in the cache (as soon as I
  set that up.) \n\n<h3>The page has an Atom feed. </h3>\n\nAtom works nicely with
  Python, because Python works nicely with <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO
  8601 date formatting. </a>.\n\n<h3> More Ideas </h3>\n\nSo, that's about it for
  Potater's features. Now let's talk about plans for the near future! \n\n<h4> <del>Creative
  Commons License</del> - Done </h4>\nThe whole site, code, database, the works, is
  going up under a Creative Commons sharealike attribution license.  Just have to
  add that as a dongle near the bottom.  Heck, I could add a step in the 'release'
  script that just balls the whole thing up from socks-to-tits as a .tar.gz file and
  includes it next to the Creative Commons link. (A good hook for autobackups, too.)
  \n\n<strong>Edit: </strong> The site is now under a proper GPL license. \n\n<h4>
  Categories </h4>\nThere's category metadata in the .json files, but the site doesn't
  do anything with that. Category-specific pages shouldn't be too difficult to spatula
  together. \n\n<h4> Widget </h4>\nThanks to the freely-available JSON data, a PotaterWidget
  should not be too hard to generate.\n\n<h4> Validation </h4>\nWhile an empty Lorem
  Ipsum site w3c validates as HTML5, some invalid stuff can come through the JSON
  pipe. I'm looking at you, '&amp;' symbol.  Fixing this, and making the site pass
  through an automatic W3C validation step before going live, are both ideas.\n\n<h4>
  <del>Cache/Gzip</del> - Done </h4>\nThere's no caching or gzipping yet! Baffling!
  With content so expressly optimized for such a situation, that's just a travesty.
  I'm also going to look at lighter-weight HTML-serving options, like <a href=\"http://nginx.org/\">nginx</a>
  or <a href=\"http://www.lighttpd.net/\">lighttpd</a> - especially because all my
  web server has to do is serve up vanilla HTML.\n\n<strong>Edit: </strong> As it
  turns out, Apache makes this sort of thing pretty darned foolproof.\n\n<h4> The
  Flood </h4>\nA tool to parse my Google Reader <a href=\"http://en.wikipedia.org/wiki/OPML\">OPML</a>
  (xml containing all of my feeds) into a working web feed to share with others.  It's
  on the buildy-buildy list.  \n\n<h4> Getting The Word Out There </h4>\nAlso, I have
  to make Potater THE MOST POPULAR WEBSITE ON THE INTERNET.  So, you know, I should
  .. tell some people about it or something? \n\n"
