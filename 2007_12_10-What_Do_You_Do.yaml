---
title: ! 'What Do You Do? '
created: '2007-12-10T06:00:33+00:00'
visible: true
categories:
- Needlessly Technical
- University
content_type: html
content: ! "<blockquote style=\"padding-left:20px;\">\nHey Curtis, I am not sure why,
  but I have struck an interest in what you do for schooling? I know it is all high
  tech computer stuff, but I am interested in what you do? Help me out here, will
  ya? lol Thanks pal! \n</blockquote>\n\nI'm taking Computing Science at Simon Fraser
  University- it started as basic programming and then slowly became an in-depth look
  at how computers do the magic that they do, from the microchips to operating systems,
  and then a lot of more specialized topics, like compilers, graphics, sound, and
  tonnes of painful, painful math.  Last semester, I took courses on User Interface
  Design (i.e. the parts of the program that you see), Networking, Data Structures
  & Algorithms, and next semester, I'm taking a course on Statistics, one on Technical
  Writing, and a third on Symbolic Computing.\n\nNow an important part of all that
  is - while it helps you understand computers, the internet, how it all works and
  why - it doesn't necessarily make you any better at working with those things- it's
  just kind of a base to work from.  \n\nWe're expected to learn all of the *practical*
  stuff about computers on our own- how to program, how to develop software, how to
  do all of the myriad stuff that needs to get done to develop software well, how
  to set up websites, how to set up networks and keep our computers in pristine condition,
  everything.  BCIT is known for teaching the practical stuff a lot more thoroughly,
  and sometimes I'm jealous of the BCIT students (but then again, I met Kristen at
  SFU, so no complaints there.)\n\nThe people who don't amass enough practical knowledge
  to go into development go to grad school where they are paid peanuts to hyperspecialize
  in certain inconsequential computing tasks.  Some people go to large companies where
  they are paid good money to hyperspecialize in certain less-inconsequential computing
  tasks - For example, I'm pretty sure there's a person at Electronic Arts, whose
  entire job, day-in-and-day-out, is to find more efficient ways to render grass.
  Years of working as faceless, replaceable cogs in exchange for job security tend
  to melt souls, but on the other hand, it can pay really obscenely well. \n\nNot
  only are we expected to pick up all of the practical stuff on our own, we are expected
  to specialize in certain skills and activities- some in C++/C#/VB/.NET/Windows programming,
  other people in C/C++/Python/Linux, some people become IT Guys or Quality Assurance
  Testers or System Administrators. Some poor bastards specialize in Java, but because
  it's the language that everybody learns by default in University, Java  programmers
  tend to be a very common, poorly-treated bunch.  I got my start in Web Programming
  setting up my own website at curtis.lassam.net - simple, maybe, but the more I learn
  about web programming, the more it seems like I have a lot of learning ahead of
  me. \n\nOnce you know the basics, learning enough about a domain to get a job with
  other people in that domain takes merely weeks.  Becoming good, though, learning
  the ins-and-outs of the industry, takes years, and thanks to the ever-marching-field
  of technology if you don't stay up-to-date you become obsolete.\n\nSome people go
  on to design computer-innards, but usually not us CS students- that's more for electrical
  engineers and computer engineers.  There's way more math- and engineering degrees
  reduce people to boring, weeping lumps of humanity.\n\nThrough some combination
  of hookery and crookery, I've somehow managed to pick up (on my own time) enough
  salable skills in the area of web-programming to get a job in the industry, programming
  things.  Right now I'm at Research In Motion, working on software that makes certain
  boring administrative tasks faster. This is another thing about programming that
  they don't tell you- only the best programmers get to work on software that people
  actually get to use- everybody else ends up working on custom-one-company internal
  software.\n\nSo.. uh.. CS! Constantly changing, constantly challenging, tonnes of
  options. Some good, some bad.  \n\nThat's what I do. (That and write essay-length
  answers to short questions)"
