---
title: They
created: '2007-10-17T10:35:45+00:00'
visible: false
categories:
- Needlessly Technical
content_type: html
content: ! "<img src=\"http://curtis.lassam.net/images/weenies.jpg\" alt=\"Weenies\"
  />\n\nThey're everywhere. They exist among us. I try to escape it, but I am also
  one of them.\n\nThey have nice offices. They have Aeron chairs.  They make lots
  of money and they are usually quirky and fun. They're all-but-impossible to differentiate
  from good programmers, except that they're far more common.\n\nThey build the software
  that you use in your day-to-day life. \n\nNot the software that you enjoy.  The
  software that you hate.  The bank software that asks you too many questions and
  the custom-built company-wide applications that never seem to work properly.  \n\nThey
  built the firmware for your router.  They built Zango.  They built Windows Vista.
  They built thousands of little companies and products.  They wrote the instructions
  for your portable hard-drive and they wrote that crappy point-of-sale system. They've
  built just about every piece of software that you've ever encountered. \n\nThey
  didn't build Microsoft Excel or Microsoft Word.. but they did build Clippy.  They
  didn't build Google but they will shape a new generation of Google products. \n\nThey
  don't have a solid grasp of English (or they're just lazy), so they don't comment.
  \ They use variable names that have nothing to do with the variables, or variable
  names that are acronyms. $IAKsom, $PRQ.  They use global variables and gotos.  They
  make every language into the language that they learned first. \n\nThey don't understand
  relational databases.  They use too many tables. \n\nThey code without designing,
  they design without coding. They stay up late finishing projects that are behind
  deadline.  They're underappreciated and overbudget.   \n\nThey don't test nearly
  enough.  They get it working and then move on to the next task.  They don't document
  what they've done for the next person. They use clever programming tricks to write
  lines of code more 'concisely'. \n\nThey code in a language because that's what
  everybody else is using.  They only have a hammer, and every problem looks like
  a nail.  They use Design Patterns. They create massive object heirarchies. \n\nThey
  own their domain so thoroughly that they assume you give a shit and are willing
  to learn, too. \n\nThey use Java, PHP, XSLT.  Their error messages are misspelled
  and grammatically incorrect.  They use Hungarian Notation, and they use it wrong.\n\nThey
  try to quantify things that can't be quantified.  They overpromise and underdeliver.
  \n\nThey don't understand recursion or pointers.  They free their own memory and
  they are proud of it.  They don't encapsulate anything.  They hard code important
  variables into their programs.  \n\nTheir programs are so flexible that they could
  do anything. They have rules engines and customizations and parallel databases.
  \ They organize groups into projects and projects into domains.\n\nThey specialize
  in one technology in exclusion of all else. \n\nThey don't build software to do
  one thing well. They build software to do many things, terribly.\n\nThey believe
  that all software should only do one thing well. \n\nThey see a contradiction and
  they can't parse it.  Everything has to be one or the other, it can't be both!\n\nThey
  are so used to Linux that they cannot imagine how stupid users can really be.\n\nThey
  don't know Linux at all. \n\nThey don't assert() things. If it's never supposed
  to happen, it will never happen, right? \n\nThey use Rational Rose, Oracle, massive
  software packages that suffer from the same defects as their own massive software
  packages. \n\nThey use underpowered free-as-in-beer solutions because they aren't
  willing to pay for decent tools.  \n\nThey make enterprise software. They make mid-market
  solutions. They use the word \"solutions\" and mean it.  They make CMS's. They promise
  that their software is so flexible that it can be customized any-which-way.\n\nThey
  are only compatible with IE6. They are only compatible with FireFox. \n\nThey never
  experiment with new languages. If it's not going to be around in 10 years, what's
  the point?\n\nThey never experiment with old languages. If nobody uses it anymore,
  what's the point?\n\nThey'll work with trendy technologies. They think that the
  fact that it's an AJAX-enabled Ruby-on-rails Web 2.0 Adobe-Flex Fiesta Extravaganza
  will make all of their shortcomings go away. \n\nThey won't budge from Waterfall.
  \ They hop on every management trend designed to improve the quality of their software.
  \ They're certified... for Quality!\n\nThey work in big companies and small companies.
  They pull the wool over the eyes of people who don't know better.  They hire more
  of themselves. They respect bluster- clearly this guy knows something about C++!\n\nThey
  want it all in the spec.  The spec is Lord and they never question the spec. To
  change the spec requires a 4-man team and a week of time.\n\nThey can't decide whether
  to add a feature or not, so they just add the feature as an 'option'.\n\nThey are
  in a GANTT chart.\n\nThey don't usability test.  They don't load-test.  By the time
  they do, it's too late.\n\nThey remember algorithmic complexity, but they never
  really understood it that well and just hope to forget as much of it as possible.\n\nThey
  want to work at Google. They care more about their own personal projects. This is
  only their day-job. \n\nThey are crappy developers.  I am one of them. I try not
  to be one of them. It's not easy."
