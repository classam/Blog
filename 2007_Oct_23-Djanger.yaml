---
title: Djanger
created: '2007-10-23T09:20:50+00:00'
visible: true
categories:
- Needlessly Technical
content_type: html
content: ! "<img src=\"http://www.curtis.lassam.net/images/croissant.png\" alt=\"Croissant
  Sandwich\" />\n\nSo far, my <a href=\"http://www.djangoproject.com/\">Django</a>
  experience has been bumpy at best.  \n\nI'll admit it- I would much, much rather
  program in Python than in PHP.  Python is just a <strong>better language</strong>.
  \ I like templating languages, and while I have an inherent distrust for Object
  Relational Models, I like that Django apps can swap in more robust SQL code if necessary.
  For small sites, ORM's are a big time saver- and most sites are small sites. On
  paper, Django is clearly the winner. \n\nSo why is it when I'm fiddling with Django,
  I get frustrated so easily? \n\nFirst of all, there's a learning curve, and in order
  to build a minimally acceptable site, one needs to cross a major learning curve.
  In order to get your first 'non-tutorial' Django site up, you need to learn Python,
  Django's Template System, Django's Model System, Django's URLConf system, and a
  few other niggling little things.  As a PHP developer, you need to learn.. PHP.
  As a Django developer, you need to learn Python, Django, Django's Database Shorthand
  and a Templating Language. \n\nSecond of all, PHP's documentation is pretty awesome.
  \ Once you've read the obligatory \"Introduction to PHP & SQL Development\" book
  that comes in many differents forms from many different authors, all you need for
  documentation is the exhaustive search-function at <a title=\"PHP Documentation\"
  href=\"http://www.php.net\">PHP.net</a>.  If you're using Firefox, you can toss
  a PHP search bar where your Google search bar usually sits. (I usually have Wikipedia
  up there, actually).  Django's documentation is.. not quite as complete. <a title=\"Django
  Book\" href=\"http://www.djangobook.com/\">The Django Book</a> is in a constant
  state of semi-completion, and <a title=\"Django Documentation\" href=\"http://www.djangoproject.com/documentation/\">the
  rest of the documentation </a> is scattered, disorganized, and searchable through
  a Google bar.\n\nThirdly, the Django documentation is not for the 'release version'
  of Django.  The documentation is for a sort of 'meta-composition' of the most recent
  SubVersion revision at the time that page of the documentation was released.  In
  fact, the only version of Django really supported by the Django community is the
  most recent SubVersion copy of the code.  Now, for a developer, this sounds pretty
  neat- but it's also a little on the scary side. Everybody is writing documentation
  and handling support for *their version* of Django.  While I may love working on
  the cutting edge of technology, if I release some sort of product, I want the underlying
  technologies to be fairly constant and long-term-supportable- which means I want
  to develop against the newest available release candidate, not some miscellaneous
  SubVersion checkout.\n\nFourthly, Django's framework introduces a certain level
  of 'magic' into the system.  Some of the stuff that Django handles is just too easy,
  and that bothers me.\n\nThe thing is, though, while I might have a lot of issues
  with Django, I keep sticking it out and fiddling with it. It is *great* on paper,
  remember.  It was designed primarily to deal with a lot of the issues that people
  have with coding in PHP, and I support that wholeheartedly. Keep in mind, too, that
  Django's pretty new - it's not even at \"Version 1\" yet! \n\nDjango's off to a
  good start. With community support, some thorough documentation, sensible release
  management, and the thousand other important things that tend to form around good
  open-source technologies, it could be a real winner. \n\nThing is, though, I don't
  want to build it- I just want to use it! "
