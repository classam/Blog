---
title: ! 'Needlessly Technical Executive Summary: The Best Software Writing'
created: '2009-10-28T14:15:42+00:00'
visible: true
categories:
- Executive Summaries
- Needlessly Technical
content_type: html
content: ! "<em>\"<a href=\"http://www.curtis.lassam.net/?cat=31\">Executive Summary</a>\"
  articles are produced when I read something, and then, in order to remember it,
  attempt to mush the entire message into a few words. </em> \n\n<em>\"<a href=\"http://www.curtis.lassam.net/?cat=13\">Needlessly
  Technical</a>\" articles are dry, and boring, and cover some sort of computer-programming
  topic.</em>\n\nSo, I'm going through the book \"The Best Software Writing\", which
  Joel Spolsky edited as an attempt to put some bloggers into print.  I'm summarizing
  everything in very-short-form for the sake of trying to remember it all. \n\n<h3
  id=\"Style_is_Substance_-_Ken_Arnold\">Style is Substance - Ken Arnold</h3>\n\n<a
  href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=74230\">Here.</a>\n\n<span
  class=\"anchor\" id=\"line-2\"></span><span class=\"anchor\" id=\"line-3\"></span><ul><li>For
  any given language, there are a few acceptable coding styles <span class=\"anchor\"
  id=\"line-4\"></span></li><li>No style is any better than the other <span class=\"anchor\"
  id=\"line-5\"></span></li><li>Arguing about style takes time <span class=\"anchor\"
  id=\"line-6\"></span></li><li>A common style is a good idea <span class=\"anchor\"
  id=\"line-7\"></span></li><li>Enforcing a universal per-language style at the compiler
  level is a Good Idea <span class=\"anchor\" id=\"line-8\"></span></li><li>This enforcement
  must be mandatory.  <span class=\"anchor\" id=\"line-9\"></span><span class=\"anchor\"
  id=\"line-10\"></span></li></ul>\n\n<h3 id=\"The_Pitfalls_Of_Outsourcing_Programmers_:_Why_Some_Software_Companies_Confuse_The_Box_With_The_Chocolates_-_Micheal_Bean\">The
  Pitfalls Of Outsourcing Programmers : Why Some Software Companies Confuse The Box
  With The Chocolates - Micheal Bean</h3>\n\n<a href=\"http://forio.com/resources/the-pitfalls-of-outsourcing-programmers\">Here.</a>\n\n<span
  class=\"anchor\" id=\"line-17\"></span><span class=\"anchor\" id=\"line-18\"></span><ul><li>You
  lose the ability to be competitive or differentiate yourself in anything that you
  outsource. <span class=\"anchor\" id=\"line-19\"></span></li><li>This is okay for
  non-critical business functions - like the boxes that you ship chocolates in.  <span
  class=\"anchor\" id=\"line-20\"></span></li><li>This is not okay for critical business
  functions - like the chocolates themselves.  <span class=\"anchor\" id=\"line-21\"></span></li><li>\"Software\"
  is almost always \"The Chocolates\".  <span class=\"anchor\" id=\"line-22\"></span><span
  class=\"anchor\" id=\"line-23\"></span></li></ul><p class=\"line867\">\n\n<h3 id=\"ICSOC04_Talk_-_Adam_Bosworth\">ICSOC04
  Talk - Adam Bosworth</h3>\n<a href=\"http://adambosworth.net/2004/11/18/iscoc04-talk/\">Here.</a>\n<span
  class=\"anchor\" id=\"line-29\"></span><span class=\"anchor\" id=\"line-30\"></span><ul><li>Very
  complicated abstractions that make for very simple systems (regular expressions,
  SGML, C++) are often replaced by very simple abstractions that make for very complex
  systems (Google, HTML, PHP) <span class=\"anchor\" id=\"line-31\"></span></li><li>A
  lot of very successful systems are \"simple, sloppy, flexible, human\", and a lot
  of failed systems are \"clean, crisp, clear, correct\".  <span class=\"anchor\"
  id=\"line-32\"></span></li><li>When a technology becomes ubiquitous, the 'media'
  ceases to be the message, and people become far more concerned with the content.
  <span class=\"anchor\" id=\"line-33\"></span></li><li>\"The currency of reputation
  and judgement is the answer to the tragedy of the commons\" <span class=\"anchor\"
  id=\"line-34\"></span></li><li>Machine learning, inference, and data mining all
  provide ways to sort through the massive amount of data we regularly face. AI is
  mainstream and vitally important. (Disagree? Okay, turn off your spam filter. )
  \ <span class=\"anchor\" id=\"line-35\"></span><span class=\"anchor\" id=\"line-36\"></span></li></ul><p
  class=\"line867\">\n\n<h3 id=\"Autistic_Social_Software_-_Danah_Boyd\">Autistic
  Social Software - Danah Boyd</h3>\n<a href=\"http://www.danah.org/papers/Supernova2004.html\">Here.</a>\n\n<span
  class=\"anchor\" id=\"line-37\"></span><span class=\"anchor\" id=\"line-38\"></span><ul><li>Many
  failed (and a few popular) social networks attempt to codify human interaction in
  simple technical ways.  <span class=\"anchor\" id=\"line-39\"></span></li><li>No
  popular social network even approaches actual human social interaction.  (I'd say
  you get a much more human 'community' from IRC or phpBB ) <span class=\"anchor\"
  id=\"line-40\"></span></li><li>Many times, these social networks are popular, not
  because they model social interaction, or replace it (they don't) but because of
  the ways that people use them alongside social interaction - to play games, or to
  interact with people they might not talk to often. <span class=\"anchor\" id=\"line-41\"></span></li><li>Flexible
  systems are popular because they can be repurposed to work in many ways.  <span
  class=\"anchor\" id=\"line-42\"></span><span class=\"anchor\" id=\"line-43\"></span></li></ul><p
  class=\"line874\">There are three ways to make technology work with people.  <span
  class=\"anchor\" id=\"line-44\"></span><span class=\"anchor\" id=\"line-45\"></span><ol
  type=\"1\"><li>Make a technology, market it, force adoption.  <span class=\"anchor\"
  id=\"line-46\"></span></li><li>Make a technology, observe how users use the technology,
  try to support these activities <span class=\"anchor\" id=\"line-47\"></span></li><li>Understand
  a group of people, try to develop software that works for them.  <span class=\"anchor\"
  id=\"line-48\"></span><span class=\"anchor\" id=\"line-49\"></span></li></ol><p
  class=\"line874\">(Or, ideally, start at 3, then do 2. )  <span class=\"anchor\"
  id=\"line-50\"></span><span class=\"anchor\" id=\"line-51\"></span><p class=\"line867\">\n\n<h3
  id=\"Why_Not_Just_Block_The_Apps_That_Rely_On_Undocumented_Behavior_-_Raymond_Chen\">Why
  Not Just Block The Apps That Rely On Undocumented Behavior - Raymond Chen</h3>\n\n<a
  href=\"http://blogs.msdn.com/oldnewthing/archive/2003/12/24/45779.aspx\"> Here.
  </a>\n\n<span class=\"anchor\" id=\"line-52\"></span><span class=\"anchor\" id=\"line-53\"></span><ul><li>Incompatibility
  makes people less likely to want to upgrade <span class=\"anchor\" id=\"line-54\"></span></li><li>Breaking
  software makes people less likely to want to develop software for your systems <span
  class=\"anchor\" id=\"line-55\"></span></li><li>\"Lock-in\" is fundamentally important
  to OS companies - breaking software hurts 'lock-in'.  <span class=\"anchor\" id=\"line-56\"></span></li><li>Thus,
  at least in older Windows releases, there are layers upon layers of compatibility
  hacks to keep popular software working from release to release.  <span class=\"anchor\"
  id=\"line-57\"></span><span class=\"anchor\" id=\"line-58\"></span></li></ul><p
  class=\"line867\">\n\n<h3 id=\"Strong_Typing_vs._Strong_Testing_-_Bruce_Eckel\">Strong
  Typing vs. Strong Testing - Bruce Eckel</h3>\n\n<a href=\"http://www.mindview.net/WebLog/log-0025\">Here.</a>\n\n<span
  class=\"anchor\" id=\"line-72\"></span><span class=\"anchor\" id=\"line-73\"></span><ul><li>Static
  type-checking brings the gift of compile-time correctness checking. With dynamic
  type-checking, one must wait until runtime, and some bugs are never found.  <span
  class=\"anchor\" id=\"line-74\"></span></li><li>Duck typing allows for much more
  concise end elegant code. <span class=\"anchor\" id=\"line-75\"></span></li><li>A
  20 line Java program is reduplicated in Python in 10 lines. Bam.  <span class=\"anchor\"
  id=\"line-76\"></span></li><li>Even in statically typed languages, compilation does
  not imply correctness. <span class=\"anchor\" id=\"line-77\"></span></li><li>Proper
  unit testing catches many more errors than static type checking. It should be used
  on all projects, static or dynamic. <span class=\"anchor\" id=\"line-78\"></span></li><li>If
  you're going to do proper unit testing anyways, why include all of the needless
  static type checking cruft?  <span class=\"anchor\" id=\"line-79\"></span><span
  class=\"anchor\" id=\"line-80\"></span></li></ul><p class=\"line867\">\n"
