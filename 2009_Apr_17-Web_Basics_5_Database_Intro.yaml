---
title: ! 'Web Basics 5: Database Intro'
created: '2009-04-17T15:49:38+00:00'
visible: true
categories:
- Tutorials
content_type: html
content: ! "<em>This is part 5 of a many-part series - a crash course on web basics,
  from Apache to Zend.</em>\n\nWith HTML and CSS down, you can create static websites
  that look great.  But that's web-page-design, and we're talking about web <em>programming</em>.\n\nAll
  of the dynamic content in a web-page is usually handled by a programming language
  of some sort- and if you're building the most simple of dynamic web-pages, that's
  all you'll need.  The rest of the time, though, you'll need some sort of data model.\n\n<h3>Flat
  File Foolery</h3>\n\nAs a <em>real programmer</em>, the first thing you'll probably
  do when dealing with any sort of dynamic data access is produce, manage, and track
  a series of flat files.  You might have one marked 'users' with a list of users
  and passwords, and another marked 'contact information', with contact information
  for each of the users.\n\nThis is messy, though.  \n\nFirst of all, it's hard.  You
  have handle all of the file management mechanics for opening and closing a file,
  updating, retrieving, and deleting data, and serializing object data.  \n\nSecond
  of all, it's inefficient.  If you want to search through the data, either you need
  to produce some sort of indexing scheme, or you need to open, trawl, process, and
  search though every line of data in your flat files.  \n\nIf you're a <em>real programmer</em>,
  you're going to start working on a system- some automatic system that handles the
  file management, the data indexing, the serialization, the indexing and searching,
  caching (for efficiency) - the whole works.  At this point, what you have built
  is a database.  \n\n<h3>A Database</h3>\n\nA database is a service that runs on
  your computer- much like a web server.  The trick is that, instead of serving up
  HTML, it just doles out steaming hot piles of fresh data.\n\nDatabases are organized
  into 'tables'- much like the sort of tables one would encounter in Excel.  \n\nNow,
  imagining you had a giant database table, filled with user information- firstname,
  lastname, email, phone number,  address, city, province, country - all standard
  stuff. (Although 'province' is often replaced by 'region' in software that must
  deal with states, provinces, prefects, and what-have-you.)\n\nIf I want to find
  the address of user 'Curtis Lassam', or produce a list of all Lassam family members
  living in British Columbia, it's quite easy. I have a database.  All I would need
  to do is connect to the database, send the database a 'query' containing the data
  that I'm looking for, and then have the database send back the requested data.  Easy-peasy.
  \n\n<h3> Querying: The Q in SQL! </h3>\n\nWell, maybe not quite so easy as you'd
  think.  You can't just send the database a query saying \"Please send me a list
  of all of the Lassams living in British Columbia.\"- of course. You have to produce
  a query.\n\nIn order to keep the language small, and the software language-independent,
  queries are not generally handled in any common programming language.  They, instead,
  are handled by the Structured Query Language, or 'SQL'.\n\nA SQL query for all of
  the Lassams living in British Columbia might look like: \n<pre class=\"brush: sql\">\n
  \   SELECT firstname, lastname FROM users WHERE lastname = \"Lassam\" AND province
  = \"BC\"; \n</pre>\n\nWhat we get in response would be a list of first and last
  names in the 'users' table.  Of course, we don't really need to select the last
  name- we know it's going to be 'Lassam', right? \n\n<em> More on databases soon!
  If you want to learn more, and fast, I highly recommend \"The Manga Guide To Databases\",
  available from <a href=\"http://www.amazon.ca/Manga-Guide-Databases-Mana-Takahashi/dp/1593271905/ref=sr_1_1?ie=UTF8&s=books&qid=1240012138&sr=8-1\">Amazon</a>
  or for <a href=\"http://cufts2.lib.sfu.ca/CRDB/BVAS/resource/5846\">free on Safari</a>
  (if you're a SFU student.) </em>\n"
