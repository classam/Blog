---
title: ! 'Web Basics 1: HTTP'
created: '2009-03-27T01:11:10+00:00'
visible: true
categories:
- Tutorials
- Web
content_type: html
content: ! "<h3>Intro</h3>\nThis is the beginning of a series on the Basics of Web
  Programming.  It's designed to be an exceedingly fast, high-level look at all of
  the tools and skills involved in web-programming - not a detailed reference.  The
  point is to get Lorin up-to-speed, and quickly.  Ask questions (and point out errors)
  in the comments, and if you're curious, look things up on your own!\n\n<h3>Servers:
  HTTP And You</h3>\nHTTP, or the Hypertext Transport Protocol, is the protocol that
  implements 'the web'.  HTTP is implemented with TCP, traditionally over port 80.
  It's a request-response protocol- you send a HTTP Request, you get a HTTP Response.
  \n\n<h4>HTTP Request</h4>\nThere are a number of different 'types' of HTTP Request,
  most of which you will never use. (HEAD, GET, POST, PUT, DELETE, TRACE, OPTIONS,
  and CONNECT)  The two that your web browser tend to use most are GET and POST.\n\nA
  GET request contains only the address of the item being requested.  (Think of it
  like \"GET http://www.google.ca\" ). One might look like this:\n\n<div class=\"code\">\n
  \   <strong>GET /yeah/file.html HTTP/1.1\n    Host: www.awesome.com:80</strong>\n
  \   User-Agent: Mozilla/5.0\n    Accept: image/png, image/*;q=0.8, */*;q=0.5\n    Accept-Language:
  en-gb, en;q=0.5\n    Accept-Encoding: gzip, deflate\n    Accept-Charset: ISO-8859-1,
  utf-8;q=0.7, *;q=0.7\n    Keep-Alive: 300\n    Connection: keep-alive\n    Referer:
  http://www.curtis.lassam.net\n</div>\n\nWoo, boy, there's a lot of information there.
  \n\nThe most important part, though, is the fact that we're looking for www.awesome.com/yeah/file.html-
  which we can extract pretty easily just by looking at it.  The rest of the data,
  you can do whatever you want with. It's common for coders to ignore it entirely-
  the web server handles the important bits already. \n\nLooking at the header data,
  a few fields contain data of the type thing?q=0.5 . This is a measure of preference.
  \ As an example, because my browser is English Canadian <small>(odd assigning nationality
  to a browser, but whateva')</small> - it accepts en-gb, then en?q=0.5 - which means
  that, if the server has a Great Britain localization available, it should send that
  one- but if not, it should send any other English language version it's got. \n\nYou
  can also include key-value pairs of data with the request. \n\n<div class=\"code\">\nhttp://www.ikoverse.com/start.php?<strong>key</strong>=<strong>value1</strong>&<strong>another+key</strong>=<strong>value2</strong>\n</div>\n\nA
  POST request contains the address of the item being requested, as well as key-value
  pairs of data.\n\n<div class=\"code\">\n    <strong>POST /path/script.php HTTP/1.1\n
  \   Host: www.awesome.com:80</strong>\n    User-Agent: Mozilla/5.0\n    Accept:
  image/png, image/*;q=0.8, */*;q=0.5\n    Accept-Language: en-gb, en;q=0.5\n    Accept-Encoding:
  gzip, deflate\n    Accept-Charset: ISO-8859-1, utf-8;q=0.7, *;q=0.7\n    Keep-Alive:
  300\n    Connection: keep-alive\n    Referer: http://www.curtis.lassam.net\n\n    <strong>key</strong>=<strong>value1</strong>&<strong>another+key</strong>=<strong>value2</strong>\n\n</div>\n\nSo,
  at least to the innocent bystander, it looks like GET and POST do almost exactly
  the same thing.  That bystander would be wrong!  (So wrong.)\n\nFirst of all, GET
  requests are limited in the amount of data that they can send- to the amount that
  can fit in a standard URI.  \n\nSecond of all, imagine having your password or banking
  information in a GET request- right there in the address of the site that you're
  going to!  That's no good!\n\nThirdly, and most importantly, GET requests are bookmarkable
  and cacheable.  This means that you should never assign an operation that changes
  data to a GET request - For example, http://www.ikoverse.com/start.php?<strong>delete</strong>=<strong>lorin</strong>
  would be a bad idea- to cache or bookmark.\n\n<h4>HTTP Response</h4>\nA HTTP Response
  is one of two things- either a success code, and data, or an error code.\n\nA success
  code looks like this- the code, then a line break, then the data.\n\n<div class=\"code\">\n
  \   HTTP/1.1 200 OK\n    Content-Type: text/html\n    Content-Length: 111\n\n    (Block
  of HTML data here)\n</div>\n\nOkay, that's all we need to cover, protocol-wise.
  Our next lesson will be... Servers! \n"
