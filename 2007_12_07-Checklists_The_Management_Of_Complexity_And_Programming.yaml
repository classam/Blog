---
title: Checklists, The Management Of Complexity, And Programming
created: '2007-12-07T15:37:00+00:00'
visible: true
categories:
- Links To Other Stuff That Is Good
- Needlessly Technical
content_type: html
content: ! "I just recently read an article in the New Yorker (Okay, on Reddit linking
  to the New Yorker) about how a doctor is <a href=\"http://www.newyorker.com/reporting/2007/12/10/071210fa_fact_gawande?currentPage=1\">revolutionizing
  intensive-care units with the simple expedient of checklists</a>.\n\nThe article
  was a great read- it managed to be informative, gripping, thought-provoking and
  heart-warming all at once.\n\nSo, why was the article found in the programming section
  of reddit?\n\n<blockquote style=\"padding-left: 20px;\">\n\"They could have required
  Model 299 pilots to undergo more training. But it was hard to imagine having more
  experience and expertise than Major Hill, who had been the U.S. Army Air Corps’
  chief of flight testing. Instead, they came up with an ingeniously simple approach:
  they created a pilot’s checklist, with step-by-step checks for takeoff, flight,
  landing, and taxiing. Its mere existence indicated how far aeronautics had advanced.
  In the early years of flight, getting an aircraft into the air might have been nerve-racking,
  but it was hardly complex. Using a checklist for takeoff would no more have occurred
  to a pilot than to a driver backing a car out of the garage. But this new plane
  was too complicated to be left to the memory of any pilot, however expert.\"\n</blockquote>\n\nProgramming
  is all about the management of complexity.  Once tasks become sufficiently complex,
  a checklist improves it's accuracy and speed.  If at-all possible, those checklists
  can then be automated to save even more time- and it's that second step where programmers
  come in. What purpose a checklist when a computer can perform every task in the
  checklist for you automatically?  All of the complexity starts to flow out of the
  original task and into the hands of the coder, where it can be automated away.\n\nProgramming
  in it's entirety can be seen as a series of checklists- do this, then do this, then
  do this. Single items in large checklists can be broken up into their own, ever-smaller
  checklists, which can be broken into ever-smaller tasks until the things being checked
  off are single lines of code- and then single chipset instructions. It's turtles
  all the way down!  \n\nModular programming erupted when people realized that some
  checklists can be generalized and used again and again.  Object-oriented programming,
  when people noticed that the checklists and the data that the checklists were working
  on made more sense when paired up. Design-patterns because the very act of programming
  has become complex enough that certain parts of it can be accomplished by common
  well-known checklists- 'patterns'. \n\nPeople will spend years studying ways to
  make single checklists- for, say, sorting, or matching, or searching- more efficient.
  These checklists are used so often that advances in their implementation can improve
  the speed of thousands of other checklists that depend on them.  There are checklists
  for making it seem like you can run more than one checklist at once, checklists
  for managing the difficulties that arise when all of a sudden you can run more than
  one checklist at once, checklists for converting checklists into different sorts
  of checklists, and checklists for services that other checklists require to provide
  valuable services to other checklists. \n\nThis is all tremendously complex, but
  because it's all handled by automated checklists upon automated checklists, each
  one reducing the complexity of the last, all of the complexity is eventually reduced
  to the point where people who can't tell a bit from a cool, frosty Mr. Pibb can
  harness the incredibly powerful power of checklists-upon-checklists to view thousands
  of pixels on a screen, painstaking organized to display articles transmitted from
  thousands of miles away about how complex Intensive-Care can be. \n\nThis article
  was in the 'programming' section of Reddit because- even though it didn't mention
  computers even once, it reminded us of a deep and fundamental unit of programming-
  the checklist- and reminded us that even in it's most elementary form, it's a powerful
  tool that can find all sorts of clever uses."
