---
title: ! 'Web Basics 4: Layout & Cascading Style Sheets'
created: '2009-03-29T15:36:56+00:00'
visible: true
categories:
- Tutorials
- Web
content_type: html
content: ! "This is part 4 of a many-part series - a crash course on web basics, from
  Apache to Zend.  (Okay, I'm not actually covering Zend, but I couldn't pass up the
  A-Z thing. ) \n\nIt's time to learn about layout!\n\n<h3>Tables (Straight HTML)</h3>\nUsing
  nothing more than the html elements that we have so far- images, links, tables,
  etcetera, we can assemble websites, easy-peasy.  One needs a few additional tags-
  font, u, b, as well as a whole bag of tricks- invisible .gif files, image maps,
  cheating with Dreamweaver, the works. \n\nThis is how websites were built, back
  in the day.  Straight-up HTML.  It was, generally, a big pile of ugly.\n\n<h3>CSS</h3>\nSo,
  instead of cramming all of that style directly on to the page, we use CSS- \"Cascading
  Style Sheets\".  CSS allows us to grab certain elements and apply style directly
  to them, with style rules.\n\nSo, for example, if we wanted to make all of the h2
  elements on a page blue and underlined, we could create a CSS rule:\n\n<pre class=\"brush:
  css\">\n    h2\n    {\n        color: blue;\n        text-decoration: underline;\n
  \   }\n</pre>\n\nIn order to make specific elements easier to grab, we can use ID's
  or classes.\n\nIn the case of this code: \n<pre class=\"brush: xml\">\n&lt;div class=\"post\"&gt;
  &lt;ul id=\"nav\"&gt; &lt;li&gt; thing&lt;/li&gt; &lt;li&gt;thing&lt;/li&gt; &lt;/ul&gt;
  &lt;/div&gt;\n</pre> \n\nYou can grab the list using the 'nav' id.\n\n<pre class=\"brush:
  css\">\n    .post\n    {\n        padding: 1em;\n    }\n\n    #nav\n    {\n        padding-left:
  10px;\n        background-color: #DDDDDD;\n    }\n</pre>\n\nYou can also select
  sub-items.  If you want to select only the &lt;li&gt; tags underneath the 'nav'
  ID, you can.\n\n<pre class=\"brush: css\">\n    #nav li\n    {\n        color: #444;\n
  \   }\n</pre>\n\n<h3>Binding a CSS page to your HTML</h3>\n\n<pre class=\"brush:
  xml\">\n     &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot;
  media=&quot;screen&quot; /&gt;\n</pre>\n\nMultiple stylesheets can also be used.
  \ You'll often find developers with one stylesheet for layout, one for 'theme',
  and a third designed specially to resolve bugs for those poor schmucks who use Internet
  Explorer 6.\n\n<pre class=\"brush: xml\">\n&lt;link rel=&quot;stylesheet&quot; href=&quot;layout.css&quot;
  type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;\n     &lt;link rel=&quot;stylesheet&quot;
  href=&quot;theme.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;\n\n
  \    &lt;!--[if lte IE 6]&gt;\n     &lt;link rel=&quot;stylesheet&quot; href=&quot;ie6.css&quot;
  type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;\n     &lt;![endif]--&gt;\n</pre>\n\n<h3>What's
  the difference between an ID and a class?</h3>\nSo, you'll notice that ID's and
  class elements both work about the same way, right? Of course you noticed that,
  you're a smart cookie.  Here's the trick- ID's are supposed to be used only on single
  elements - whereas classes are supposed to be used only on multiple elements.  This
  doesn't matter too much for CSS styling, but starts to make a huge difference when
  you're using Javascript.  If you select elements by ID, you expect a single result-
  whereas if you select elements by class, you expect an array.\n\n<h3>So why use
  ID's at all, then? </h3>\nWell, for one thing, in Javascript, it's easier to use
  a single-item result than an array of results, most of the time.  On top of that,
  in a page with ID elements, you can jump to any ID element on the page by adding
  \"#name_of_element\" to the end of the URL.  (Which is how this works: http://en.wikipedia.org/wiki/Pickled_cucumber#Polish
  )\n\n<h3>What's the difference between margins and padding? </h3>\nWhen you're styling
  an element, you can add margins, which add space around the outside of the element,
  or padding, which adds space around the inside of the element.  They work very similarly.
  \ There are a few important differences, though.\n\nA margin sits outside of the
  element's border.  A padding sits inside of the element's border. This is important
  because most of the other element properties happen inside the element's border-
  as an example, background color.\n\nOn top of that, margins combine.  If you have
  two items, each one with a margin, sitting next to one another, the total space
  between them is not equal to the added values of both the margins- instead, it's
  equal to the highest value between the two.\n\nOkay, it's not entirely clear.  How
  about an example!\n\n<pre class=\"brush: css\">\n    ul li { border: 1px solid black;
  background-color: pink; }\n    #padding li { padding: 10px; }\n    #margins li {
  margin: 10px; }\n    #both li { margin: 10px; padding: 10px; }\n</pre>\n\n<pre class=\"brush:
  xml\">\n&lt;ul id=&quot;padding&quot;&gt;\n       &lt;li&gt;Poop&lt;/li&gt;\n       &lt;li&gt;Shoop&lt;/li&gt;\n
  \      &lt;li&gt;Da Woop&lt;/li&gt;\n    &lt;/ul&gt;\n   &lt;ul id=&quot;margins&quot;&gt;\n
  \      &lt;li&gt;Poop&lt;/li&gt;\n        &lt;li&gt;Shoop&lt;/li&gt;\n        &lt;li&gt;Da
  Woop&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ul id=&quot;both&quot;&gt;\n       &lt;li&gt;Poop&lt;/li&gt;\n
  \      &lt;li&gt;Shoop&lt;/li&gt;\n       &lt;li&gt;Da Woop&lt;/li&gt;\n    &lt;/ul&gt;\n</pre>\n\nYou
  can see the results here:  <a href=\"http://curtis.lassam.net/projects/example.html\">http://curtis.lassam.net/projects/example.html</a>\n\n<h3>The
  urdl Hurdle</h3>\nWhen defining margin, and padding, it's possible to define separate
  paddings and margins for each side of the element.\n\n<pre class=\"brush: css\">\n
  \   #margins li\n    {\n        margin-top: 10px;\n        margin-right: 15px;\n
  \       margin-bottom: 10px;\n        margin-left: 15px;\n    }\n</pre>\n\nAs a
  shortcut, though, it's possible to define all of these margins in a single statement\n\n<pre
  class=\"brush: css\">\n    #margins li\n    {\n        margin: 10px 15px 10px 15px;\n
  \   }\n</pre>\n\nThe trick here is that the order is up-right-down-left.  You can
  remember it any way you want, but I've committed 'URDL' to memory. Sounds like 'hurdle'
  or 'girdle'.\n\nIf the element is symmetrical, the up-and-down, and the left-and-right
  elements can be defined at the same time.\n\n<pre class=\"brush: css\">\n    #margins
  li\n    {\n        margin: 10px 15px;\n    }\n</pre>\n\nAnd, if all of the floats
  are the same, all four elements can be defined at the same time.\n\n<pre class=\"brush:
  css\">\n    #margins li\n    {\n        margin: 10px;\n    }\n</pre>\n\n<h3>Color
  My World</h3>\nCSS represents colours in a few different ways.  The most important,
  and common, way to represent a color is with a hex code.\n\n<pre class=\"brush:
  css\">\n    a\n    {\n        color: #A2A2A2;  /* R=A2, G=A2, B=A2... gray. */\n
  \   }\n</pre>\n\nIf the color is web-safe, it can be represented with three hexadecimal
  values instead of six.\n\n<pre class=\"brush: css\">\n    a\n    {\n        color:
  #AAA; /* Shortcut for color: #AAAAAA */\n    }\n</pre>\n\nAnd, if the color is common,
  it can even be represented with the color's name.  I use this often when I'm just
  mocking up some CSS, and need a color.\n\n<pre class=\"brush: css\">\n    a\n    {\n
  \       color: salmon;\n        background-color: white;\n    }\n</pre>\n\n<h3>How
  the hell do floats work?</h3>\nWhen you 'float' a block, left or right... well,
  it's time for another demo!\n\n<pre class=\"brush: css\">\n    .floats {\n        width:
  150px;\n        height: 150px;\n        padding: 1em;\n        margin: 1em;\n        background-color:
  pink; }\n    .left { float: left;  }\n    .right { float: right; }\n</pre>\n\n<pre
  class=\"brush: xml\">\n    &lt;div class=\"floats left\"&gt;I'm floating! &lt;/div&gt;\n
  \   &lt;div class=\"floats right\"&gt; Me too! &lt;/div&gt;\n    Lorem ipsum dolor
  si amet blah blah blah blah....\n</pre>\n\nThis code's result is available here:
  <a href=\"http://curtis.lassam.net/projects/example2.html\">http://curtis.lassam.net/projects/example2.html</a>\n\nNotice,
  here, we use another trick- while elements are limited to one ID, they can have
  as many classes as they like- so we tie common display elements in the 'floats'
  class, and the bits that change in the 'left' and 'right' classes.\n\n<h3>position:
  relative</h3>\n\nOh, position: relative and position: absolute.  These are ugly
  times, let me tell you.  Setting the position: relative property on a block allows
  you to make adjustments to the position of the block, relative to it's original
  position in the page layout.  However, the 'block' that the position: relative block
  occupies during page layout doesn't change- so you have to be careful not to overlap
  with other elements.  If, say, you want to move a div with id=\"potato\" up and
  right three pixels each...\n\n<pre class=\"brush: css\">\n    #potato\n    {\n        position:
  relative;\n        bottom: 3px;\n        left: 3px;\n    }\n</pre>\n\n<h3>position:
  absolute</h3>\nposition:absolute, however, removes the element from the flow of
  the page entirely.  Your element- at least in the eyes of page flow- doesn't exist
  any more. Instead, it floats freely above the action. Watching. Judging.  If you
  don't change anything else about the property, it just sits where it was originally
  supposed to sit, probably overlapping with some text or something. \n\n<pre class=\"brush:
  css\">\n    #potato\n    {\n        position: absolute;\n        bottom: 3px;\n
  \       left: 3px;\n    }\n</pre>\n\nNow, this doesn't move the absolutely positioned
  element 3px up and 3px right, like in position:relative- it moves the absolutely
  positioned element 3px up and 3px right from the bottom-left corner of the screen.\n\nUnless,
  of course, the position: absolute block is located inside a position: relative block,
  at which point it will be absolutely positioned 3px up and 3px left from the bottom-left
  corner of the position:relative block that it's contained within.\n\n<h3>What the
  Layout?</h3>\nOne thing that you might encounter, having spent some time with CSS,
  is that layout is a very troublesome operation.  It's ugly, and everybody loses.
  \  People have come up with a few different solutions to the CSS-sucks-for-layout-problem.\n\n<h4>Fixed
  Width Layout</h4>\nCSS Layout becomes a thousand times easier if you just assume
  a fixed width- safely, for modern browsers, about 1000 pixels wide.  The problem
  of a flexible multi-width layout in CSS has yet to be solved.\n\nUsually, this fixed-width
  layout is centered in the screen, using CSS like this:\n\n<pre class=\"brush: css\">\n
  \   .main\n    {\n        width: 1000px;\n        margin: 0 auto;\n    }\n</pre>\n\n<h4>CSS
  Layout Kits</h4>\nThanks to the fact that CSS layout is ugly, but ugly and reproducible,
  people have released CSS design and layout kits containing multipurpose CSS.  The
  <a href=\"http://960.gs/\">960 Grid System</a> and <a href=\"http://www.blueprintcss.org/\">Blueprint
  CSS</a> are examples of these. \n\n<h4>Using Tables Anyways</h4>\n\nAnd finally,
  we have the last throwback to the old-style of web development- just using tables
  for layout.  While it breaks accessibility, and definitely will have web purists
  so far up your butt that it'll take a backhoe to remove them - sometimes it's just
  easier to use tables- and some layouts are really only possible using tables.  CSS
  doesn't handle flexible-width multi-column layouts with fixed-width column elements
  very well, for example.\n\nIf possible, it's best not to give up and use tables-
  but a developer's gotta do what a developer's gotta do, right? "
