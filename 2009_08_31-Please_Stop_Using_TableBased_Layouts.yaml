---
title: Please Stop Using Table-Based Layouts
created: '2009-08-31T12:20:56+00:00'
visible: false
categories:
- Web
content_type: html
content: ! "I have a new job (for those of you who don't already know) working on
  <a href=\"http://threepanelsoul.com/view.php?date=2009-08-17\">this sort of thing</a>.
  \n\nThe tech-team is pretty on-the-ball, too, I don't feel like I'm the only guy
  on the team, which is nice. \n\nCommunication between coworkers, though, is narrow
  and seems to be coordinated mostly through the lead-dudes, which means large swathes
  of code are redundant or work in totally different ways based on the developer who
  was working on that section at that time. \n\nI'm not making it better - having
  the sheer audacity to use JSON for AJAX communication instead of the site-standard
  \"big chunks of preformatted HTML\"  - and refusing to do any HTML manipulation
  in controller code - means that my code looks totally different from that of my
  co-workers'.  I'd imagine, though, that if all of the code's not going that way
  soon, it should be, and I'll bust heads to make it so. \n\nHere we have the ancient
  problem faced by developers - do I maintain consistency in the codebase by doing
  things the-same-wrong-way-as-the-rest-of-the-developers, or try to gradually improve
  things by refactoring when I encounter code that doesn't jive with my personal philosophy?
  \n\nWherever I work with a codebase, I want to ... fix things, so that they work
  The Right Way.  The only problem is that it's hard to separate things that are actually
  best practices and things that are just personal preference.  Indentation, for example?
  Personal preference, unless you're a Python programmer, at which point it becomes
  oddly important. \n\nHere are a list of \"rules\" of web coding that I consider
  to be both valuable and worth fixing code over.  I would like to see whether <em>you</em>
  think they're worth the refactoring. \n\n<ul> \n<li> <strong> Tables are only good
  for tabular data, bitches. </strong> &mdash; Every thousand years or so, you encounter
  a layout that you just can't make work in CSS.  There are some things that just
  can't be done in CSS, and a judicious table can save a developer a lot of pain.
  \ A layout, however, composed entirely of tables within tables within tables, I
  feel, is well outside of the boundaries of what is acceptable for page layout. It's
  time to introduce a little more 'semantic' and a little less 'presentational' into
  the markup. </li>\n<li> <strong> No old-school HTML. </strong> &mdash; The center
  tag, font tag, and their many brethren have no place in modern web design. Invisible
  line-breaks and non-breaking-spaces can be used as part of marked-up text, but should
  never be layout elements.  </li>\n<li> <strong> No inline styles. </strong> &mdash;
  I'm not going to lie - sometimes I'll toss an inline style into my code, just because
  I'm too lazy to open the CSS file and the element is a one-off.  But seriously,
  this is hackish, and I admit it. </li>\n<li> <strong> AJAX passes JSON or XML only.
  </strong> &mdash; I personally prefer JSON, because it's automatically parsed by
  most frameworks (or a simple eval statement, if you're sure it's not from a malicious
  source).  An AJAX request should <em>never</em> retrieve a chunk of fully-formed
  HTML.  </li>\n<li> <strong> GET &amp; POST used correctly. </strong> &mdash;  POSTs
  are uncacheable and unbookmarkable, and should be used only when a database is modified
  somehow.  GETs are cacheable and bookmarkable, and should be used the rest of the
  time.  </li>\n<li> <strong> No HTML or SQL in the Controller</strong>&mdash; In
  a Model-View-Controller framework, the Model should be the only entity to see SQL,
  and the View should be the only entity to see HTML.  The controller sits between
  the two, summoning abstract data from the Model, doing some light decision-making,
  and then passing ready-to-display data to the View, which surrounds it in that padded
  layer of HTML. </li>\n</ul>\n\nSo, do I rip through table-based layouts and gradually
  replace them with CSS? Or should I just leave well enough alone? And what about
  <em>Wanda?</em> Find out next week, on Nerds of our Lives! "
