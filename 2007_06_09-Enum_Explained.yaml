---
title: Enum Explained
created: '2007-06-09T18:56:25+00:00'
visible: true
categories:
- Needlessly Technical
content_type: html
content: ! "<style type=\"text/css\">\n.code \n{\n    background-color: #EEEEEE;\n
  \   border: 1 px dotted black;\n    margin-left: 10px;\n    padding: 5px 5px 5px
  5px;\n}\n</style>\n\n<img src=\"http://www.curtis.lassam.net/images/weenies.jpg\"
  alt=\"weenies\" />\nHello, sports fans!\n\nWhile talking to Phil today on the topic
  of CMPT 212 (Object Oriented Programming in C++)- a course that is among the poorest
  taught at SFU (right up there with \"FFP 238: Expressing quantum dynamics through
  interpretive dance\"), I thought I'd write an article briefly explaining enums.\n\nWhy
  would I do such a thing? Well, because CMPT 212 completely fails to effectively
  teach this concept, but I feel it's still an important thing to know.\n\nLet's create
  a hypothetical situation.  You ('Jonathan B. Programmer') are working on some code-
  and you need somehow to represent Skytrain stations in Vancouver.  Now, you don't
  want to use a String for the stations- there are only about 32 stations- you'd be
  wasting space!\n\nOkay, how about we use an integer! .. We can use a different number
  for each station! Yeah! \nWell, you're on the right track- but using a different
  number for each skytrain station is really ugly.\nYou have code looking like this:\n\n<div
  class=\"code\">\nif( skytrain_station = 8 )  // 8 is Columbia\n{\n\tpayphones =
  false;\n\tcrime = 3;          // 3 means \"HIGH\"\t\n}\n</div>\n\n.. And that's
  if you're good enough to comment.\nIt would be better if, instead of 8, you could
  just write down the name of the station in some human-readable fashion.\n\nHere's
  one way to do it:\n\n<div class=\"code\">\n#define SKYTRAIN_COLUMBIA \t\t1\n#define
  SKYTRAIN_NEW_WESTMINISTER \t2\n#define SKYTRAIN_22ND_STREET \t\t3\n#define SKYTRAIN_SCOTT_ROAD
  \t\t4\n#define SKYTRAIN_GATEWAY \t\t5\n#define SKYTRAIN_SURREY_CENTRAL \t6\n#define
  SKYTRAIN_KING_GEORGE \t\t7\n...\n//Then, just use an int for your variable.\nint
  skytrain_station;\n</div>\n\nIn this example, we're using #define statements to
  associate names with numeric values- this gives you the benefit of storing the skytrain
  in one integer (instead of a full string) and you still have the flexibility to
  define 2^32 different stations. (And B.C. isn't about to build 2 billion Skytrain
  stations).\n\nThere are problems with this approach, however. Preprocessor statements
  are handled mostly before the compiler gets at your code. This means that if you
  accidentally do something stupid, the compiler will be unable to give you a warning.
  (Compiler Warning #492-B: You're being a jackass.) \nOn top of that, you have to
  manage all of the numbers yourself. What if you want to add a station before Columbia-
  you'll have to increment all of the numbers by hand! Boo!\nLet's try this!\n\n<div
  class=\"code\">\nenum {\n\tSKYTRAIN_COLUMBIA, \n\tSKYTRAIN_NEW_WESTMINISTER,\n\tSKYTRAIN_22ND_STREET,\n\tSKYTRAIN_SCOTT_ROAD,\n\tSKYTRAIN_GATEWAY,\n\tSKYTRAIN_SURREY_CENTRAL,\n\tSKYTRAIN_KING_GEORGE\n}\n</div>\n\nWhat
  does this code do? Why exactly the same thing as all of those #define statements-
  except that the number is handled automatically, and the compiler is now involved
  in making sure that you don't make an ass of yourself.  \n\nThere's still a problem,
  though- what happens if someone inadvertently puts an *actual* integer value into
  your skytrain_station variable.. Maybe a mistake has occurred and instead of entering
  7.7, somebody has entered a 7,7.\n\n<div class=\"code\">\n\tcreate_station( 7.7,
  SKYTRAIN_SCOTT_ROAD ); // oh yeah! \n\tcreate_station( 7,7, SKYTRAIN_SCOTT_ROAD
  ); // oh no!\n</div>\n\nNow, let's say create_station is overloaded to accept 2
  *OR* 3 values- and the third value could be an integer (perhaps setting the average
  number of passengers).\n\nIn the first example, the first variable is set to 7.7
  (A double) and the second variable is set to 4 (The value associated with SKYTRAIN_SCOTT_ROAD)\n\nIn
  the second example, the first variable is set to 7 (An int, cast to a double), the
  second variable is set to 7 (So the system thinks it's dealing with SKYTRAIN_KING_GEORGE),
  and the third variable is set to 4 (The original value of SKYTRAIN_SCOTT_ROAD).
  The compiler will get a little bit crusty about promoting an int to a double, but
  this should compile.\n\n.. This means trouble. Your program is acting strangely,
  and it's because of a bug that is very difficult to spot. \n\nIf only we could somehow..
  associate some sort of type safety with the SKYTRAIN variable.\n\nLet's try this:
  \n\n<div class=\"code\">\nenum skytrain_station\n{\n\tSKYTRAIN_COLUMBIA, \n\tSKYTRAIN_NEW_WESTMINISTER,\n\tSKYTRAIN_22ND_STREET,\n\tSKYTRAIN_SCOTT_ROAD,\n\tSKYTRAIN_GATEWAY,\n\tSKYTRAIN_SURREY_CENTRAL,\n\tSKYTRAIN_KING_GEORGE\n}\n\nskytrain_station
  station;\n</div>\n\nOkay, so skytrain_station is just a fancy way of saying int.
  Now, if we accidentally try to assign an integer to skytrain_station, like so:\n\n<div
  class=\"code\">\nstation = 7; // will throw a compiler error: skytrain_station and
  int are two entirely different types.\n</div>\nThe compiler will throw a shit-fit
  and toss the variable out. The only variables that can be assigned to this enum
  are variables originally assigned by the enum statement:\n\n<div class=\"code\">\nstation
  = SKYTRAIN_22ND_STREET; // should be fine.\n</div>\n\nSuccess!"
