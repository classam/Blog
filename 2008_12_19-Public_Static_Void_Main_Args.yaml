---
title: Public Static Void Main Args
created: '2008-12-19T23:19:11+00:00'
visible: true
categories:
- Needlessly Technical
- Tutorials
content_type: html
content: ! "<!--(Mental note: It's getting to be about time to find a way to automatically
  color my code examples. ) -->\n\nI was browsing reddit (like always) and someone
  pointed out that- while many low-level courses require you to program in Java, very
  few of them explain the well-known preamble of <code>public static void main(String[]
  args)</code>.\n\nSo, let's see what I can explain - anybody who's not interested
  in programming, or good at programming, or who already knows - can tune out now.\n\nYou're
  going to have to be patient with my Java code.  I try to avoid Java as much as possible
  in favour of languages like Python, so my Java's a tad rusty. \n\n<h3> Public </h3>\n\nBefore
  we talk about <strong>'public'</strong> and <strong>'static'</strong>, let's throw
  out a quick Object-Oriented-Programming refresher. \n\n<h4> The Employee Class </h4>
  \n\nImagine that you're writing a program that deals with a lot of data.  You're
  managing 200 employees, and you're writing a program to schedule vacation time for
  each one of them.   The first thing that many programmers will think about is how
  to deal with employee data.    \n\nIn this case, we're going to need to keep track
  of - at the very least- employee names and vacation times.  For each employee, we
  can maintain the employee name as a simple string- and the employee vacation time
  can be represented as an Vector of TimeSpan objects. I'll explain that Vector/TimeSpan
  thing in a second.\n\nSo, let's tie that data together: a string (to hold the name)
  and a Vector (to hold the dates).  We'll do that with an Employee class. \n\n<pre
  class=\"brush: java\">\nimport java.util.Vector;\n\nclass Employee {\n&nbsp;string
  name;\n&nbsp;Vector vacationTime;\n}\n</pre>\n\nBefore we continue, let's talk about
  the Vector and TimeSpan classes...\n\n<h5> What is a TimeSpan? </h5>\n\nA TimeSpan
  is an class representing a chunk of time.  For example, if I wanted to take January
  10-13 off from work, I could represent it within the system as...\n\n<pre class=\"brush:
  java\">\n// Remember to properly import TimeSpan and Date\n// Note that all of this
  easily-understood year-month-day stuff has been 'deprecated'\n// by some harder-to-understand
  \"Calendar\" stuff in newer versions of Java.\nDate startDate = new Date(2008, 1,
  10);  \nDate endDate = new Date(2008, 1, 13); \nTimeSpan timeoff = new TimeSpan(
  startDate, endDate ); \n</pre>\n\n<h5> What is a Vector? </h5> \n\nWe can't be sure
  how many different vacation 'spans' an employee might have.  Mr. Baker from Accounting
  might use his vacation days sparingly to turn long weekends into four or five-day
  weekends all year round, while Mr. Asher from the Hat Department might blow all
  of his vacation days in one four-week-long trip to Spain.  Given that, we have no
  clue how many TimeSpan objects we're going to have to store! \n\nFortunately, the
  <a title=\"Java Vector\" href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/util/Vector.html\">Vector</a>
  class exists- you can think of a Vector as a collection of 'things' that you can
  add to or remove from at will.  An array where you don't have to specify the size
  beforehand.\n\n<a href=\"http://www.javacoffeebreak.com/faq/faq0017.html\">Here's</a>
  a Vector tutorial as an introduction.\n\n<h5> Back to our regularly scheduled programming...
  </h5> \n\nOkay, so now we have an Employee class.  Let's try it out, shall we? \n\n<pre
  class=\"brush: java\">\n// Here I create an employee- and give him Christmas Vacation
  off. \nEmployee me = new Employee();\n\nDate startChristmasVacation = new Date(
  2007, 12, 22 );\nDate endChristmasVacation  = new Date( 2007, 12, 26 );\nTimeSpan
  christmasVacation = new TimeSpan( startChristmasVacation, endChristmasVacation );
  \n\nme.name = \"Curtis Lassam\"\nme.vacationTime = new Vector();\nme.vacationTime.addElement(
  christmasVacation );\n\n</pre>\n\nWonderful.  Now, let's say that we want to count
  all of the vacation days an employee has in a year.  We could write some code to
  handle this for us- it will loop around, counting the number of days in each TimeSpan.
  \ \n\n<pre class=\"brush: java\">\n// note: this is one way to trawl through a Vector,
  \n// although you can do a standard \n// for ( int i = 0; i < me.vacationTime.size();
  i++) \n// loop, instead, if you want. \n\nint days = 0;\nfor (Enumeration e = me.vacationTime.elements();
  e.hasMoreElements();)\n{\n&nbsp;TimeSpan vacation  = (TimeSpan) e.nextElement();\n&nbsp;
  int ms_per_day = 86400000; // number of milliseconds in a day.\n&nbsp; days += math.floor(
  vacation.getEndDate().getTime() - vacation.getStartDate().getTime() / ms_per_day
  );\n}\n</pre>\n\nIt's a tad ugly, but it does the job.  We may talk again later
  about that 86400000- just plunking 86400000 down there in the middle of the code?
  \ That would be ugly.  It's referred to in programming as a \"<a title=\"Wikipedia:
  Magic Number\" href=\"http://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constant\">magic
  number</a>\", and considered bad form.  We're at least naming it, though. \n\nSo,
  we've got this handy function to tally up the number of days - but what if we want
  to do it more than just the once?  We have to copy and paste the code all over the
  place.  Not cool.  Those of you in the audience with some experience know that this
  belongs in a function.  \n\nNow, being as this function is designed to work on a
  Vector of TimeSpan objects, we can be pretty sure we're only ever going to be using
  it on the Employee.  So let's include the function in the Employee class. \n\n<pre
  class=\"brush: java\">\nclass Employee {\n&nbsp;string name;\n&nbsp;Vector vacationTime;\n\n&nbsp;public
  int getNumberOfVacationDays()\n&nbsp;{\n&nbsp;&nbsp;int days = 0;\n&nbsp;&nbsp;for
  (Enumeration e = vacationTime.elements(); self.hasMoreElements();)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;TimeSpan
  vacation  = (TimeSpan) e.nextElement();\n&nbsp;&nbsp;&nbsp; int ms_per_day = 86400000;
  // number of milliseconds in a day.\n&nbsp;&nbsp;&nbsp; days += math.floor( vacation.getEndDate().getTime()
  - vacation.getStartDate().getTime() / ms_per_day );\n&nbsp;&nbsp;}\n&nbsp;&nbsp;return
  days;\n&nbsp;}\n\n}\n</pre>\n\n<h5> Self </h5>\n\nOne thing you'll notice is that
  the 'getNumberOfVacationDays()' function refers to 'vacationTime'- but it's not
  included as an argument to the function!  In this case, the 'vacationTime' refers
  to the 'vacationTime' of whatever class called the 'getNumberOfVacationDays()' function.\n\n<pre
  class=\"brush: java\">\nEmployee me = new Employee();\nEmployee ted = new Employee();\n\nDate
  startChristmasVacation = new Date( 2007, 12, 22 );\nDate endChristmasVacation  =
  new Date( 2007, 12, 26 );\nTimeSpan christmasVacation = new TimeSpan( startChristmasVacation,
  endChristmasVacation ); \n\nme.name = \"Curtis Lassam\";\nme.vacationTime = new
  Vector();\nme.vacationTime.addElement( christmasVacation );\n\nted.name = \"Ted
  Koppel\";\nted.vacationTime = new Vector();\nted.vacationTime.addElement( christmasVacation
  );\n\nSystem.out.print( \"My Vacation Days: \" + me.getNumberOfVacationDays() +
  \"n\");\nSystem.out.print( \"Ted's Vacation Days: \" + ted.getNumberOfVacationDays()
  + \"n\");\n</pre>\n\nIn that case, the first time 'getNumberOfVacationDays()' is
  run, me.getNumberOfVacationDays() uses me.vacationTime.  The second time, ted.getNumberOfVacationDays()
  uses ted.vacationTime. \n\n<h5> Constructors </h5> \n\nOne thing that's a bit of
  a pain- before we put any values in the Employee 'vacationTime' bin, we need to
  instantiate the variable with <code>ted.vacationTime = new Vector();</code>  Ideally,
  this would happen automatically, every time we create a new Employee. \n\nWhat we
  need here is a constructor- a function that runs automatically whenever 'new Employee()'
  is called.  \n\nConstructors have special syntax in Java. They have no return value,
  and always have the same name as the class. Constructors exist, with varied syntax,
  in just about every language that supports OOP. \n\n<pre class=\"brush: java\">\nclass
  Employee {\n&nbsp;string name;\n&nbsp;Vector vacationTime;\n\n&nbsp;public Employee()\n&nbsp;{\n&nbsp;&nbsp;vacationTime
  = new Vector();\n&nbsp;&nbsp;name = \"NAMELESS EMPLOYEE\";  \n&nbsp;}\n\n&nbsp;public
  int getNumberOfVacationDays()\n&nbsp;{...}\n\n}\n</pre>\n\n<h5>Overlapping Vacation
  Time</h5>\n\nOf course, the code I've written - aside from being untested in any
  actual Java interpreter - is wrong for a number of reasons.  One important way this
  code can break is that- if an employee has two overlapping breaks, 'getNumberOfVacationDays()'
  will overreport the number of vacation days that the employee truly has.  As an
  example, if I have January 23rd through January 29th off, and I also claim to have
  January 21st through January 28th off, the system will claim that I have 15 days
  off, instead of 9 days off.  Let's imagine a function, 'overlapCheck()', that runs
  through the class's vacationTime vector and combines any overlapping TimeSpans.
  \n\nOur employee class now looks like this: \n\n<pre class=\"brush: java\">\nclass
  Employee {\n&nbsp;string name;\n&nbsp;Vector vacationTime;\n\n&nbsp;public Employee()\n&nbsp;{...}\n
  \n&nbsp;public int getNumberOfVacationDays()\n&nbsp;{...}\n\n&nbsp;public void overlapCheck()\n&nbsp;{...}\n\n}\n</pre>\n\nThe
  overlapCheck() function just operates on data internal to the class- it doesn't
  take any arguments or return any values.  \n\nTo be safe when running our program,
  we'd have to run 'overlapCheck()' every single time we add a new TimeSpan to the
  vacationTime vector. What a pain!  \n\n<h5> Getters And Setters </h5>\n\nOkay, let's
  create a function to automatically run overlapCheck() whenever a new TimeSpan is
  added to the Employee's vacationTime.  \n\n<pre class=\"brush: java\">\npublic void
  addVacation( TimeSpan vacation)\n{\n&nbsp; vacationTime.addElement(vacation);\n&nbsp;
  overlapCheck();\n}\n</pre>\n\nThere we go- now every time we add a TimeSpan to an
  Employee's vacationTime, it'll check if it overlaps with any other TimeSpan and
  merge any combined time. \n\nUnfortunately, though, now we have to go back and change
  all of the rest of our code- replacing <code>me.vacationTime.addElement(christmasVacation)</code>
  with <code>me.addVacation(christmasVacation)</code> anywhere vacationTime.addElement
  exists.  While this is trivially easy in our simple example, it would be much more
  difficult if our Employee code was used in a lot of other places. \n\nIt would have
  been a lot easier if we had just written 'addElement' when we had first written
  the Employee class.  It would be an almost empty function, just ...\n\n<pre class=\"brush:
  java\">\npublic void addVacation( TimeSpan vacation)\n{\n&nbsp; vacationTime.addElement(vacation);\n}\n</pre>\n\n...
  but if we wanted to change it, we'd end up saving ourselves a lot of time.  In fact,
  we could do the same things with most of the different actions we can perform on
  the Employee.  Let's start with the employee's name. Instead of working directly
  with me.name, we should write a getName() function- that returns the name - and
  setName() function - that takes a name as input, and assigns the name to the employee.
  \ \n\nHere's an example:\n\n<pre class=\"brush: java\">\nclass Employee\n{\n&nbsp;public
  string name;\n&nbsp;...\n&nbsp;public string getName() { return name; }\n&nbsp;public
  void setName( string name ) { this.name = name; } \n}\n</pre>\n\nThen, if we want
  to perform any validation or automatic actions when a name is added for an employee,
  we just need to alter setName(). \n\nAs an example, maybe we've decided to start
  keeping a firstName and a lastName field for each employee, instead of just a name
  field.  If we had written a setName function (a <em>setter</em>), we could just
  switch it around as follows:\n\n<pre class=\"brush: java\">\n// This is the old
  way\npublic void setName( string full_name )\n{\n&nbsp; name = full_name;\n}\n</pre>\n\n<pre
  class=\"brush: java\">\npublic void setName( string full_name )\n{\n// Note that
  this will break if the 'full_name' contains a middle name.\n// \"Curtis James Lassam\"
  would register as firstName = \"Curtis\", lastName = \"James\"\n&nbsp; firstName
  = full_name.split(\" \")[0];\n&nbsp; lastName = full_name.split(\" \")[1];\n}\n</pre>\n\nThat's
  a lot easier than changing the code everywhere the name is involved.  This is why
  it's considered 'good practice' to build your classes with ample getters and setters.\n\n<h5>
  Encapsulation </h5>\n\nOf course, now that we've built a getName and setName function,
  it's entirely unnecessary- and potentially dangerous- for us to directly access
  the Employee's 'name' variable.  For all he knows, it might disappear entirely!
  \ \n\nWhat do we do to protect ourselves from this eventuality?  We make the 'name'
  variable <em>private</em>.  This means that it can be accessed by functions within
  the Employee class, but not accessed by functions outside of the Employee class.
  \n\nYou can also specify that a variable is <em>public</em>.  A 'public' variable
  is... well, just a normal class variable, like the ones above.  \n\nAs an example...\n\n<pre
  class=\"brush: java\">\nclass Pirate\n{\n&nbsp; public string name;\n&nbsp; private
  int stolen_booty_value;  \n&nbsp;\n&nbsp; public Pirate(string name, int stolen_booty_value)\n&nbsp;{\n&nbsp;&nbsp;
  this.name = name;\n&nbsp;&nbsp; this.stolen_booty_value = stolen_booty_value;\n&nbsp;}\n&nbsp;
  public int getBootyValue()\n&nbsp;{\n&nbsp;&nbsp; return stolen_booty_value;\n&nbsp;}\n}\n\nPirate
  blackbeard = new Pirate(\"Edward Teach\", 5000);\nSystem.out.print(blackbeard.name);
  \ // prints \"Edward Teach\"\nSystem.out.print(blackbeard.stolen_booty_value); //
  throws an error\nSystem.out.print(blackbeard.getBootyValue() ); // prints \"5000\"\n</pre>\n\nOkay,
  let's talk about another reason why we might want to hide something using the 'private'
  modifier.  It's not that often that we write an entire codebase ourselves.  More
  frequently, we're working on teams, and other people are going to be using the classes
  that we write.  \n\nCertain elements of classes are important to the class, but
  entirely unimportant to the programmer using the class.  For example, once we've
  implemented the automatic overlapCheck() in our Employee class, the person using
  the Employee class doesn't have to think about it at all anymore.  He shouldn't
  have to think about it.  In this case, we make the overlapCheck() function private.
  \ While it exists, the programmer can't see it or call it. \n\nOf course, most of
  the time, when we're writing a function in a class, we want it to be <strong>public</strong>,
  not private. \n\n<h3> Static </h3>\n\nWow, it took a long time to explain <strong>public</strong>.
  \ The rest of the article should take a bit less time.  On to... <strong>static!</strong>.\n\nRemember
  way back when we wrote the getNumberOfVacationDays() function? We defined a constant
  ms_per_day- the number of milliseconds in a day- in order to perform the calculation.
  \n\nBut, inefficiently enough, every single time we run 'getNumberOfVacationDays()',
  the computer is going to create a ms_per_day variable, and fill it with the value
  86400000.  That right there is a waste of time and effort. \n\nInstead, we could
  define ms_per_day as a member of the class- a private member, of course, because
  nobody needs to know that it's there, and we certainly don't want anybody changing
  it. \n\n<pre class=\"brush: java\">\nclass Employee\n{\n&nbsp;private string firstName;\n&nbsp;private
  string lastName;\n&nbsp;private Vector vacationTime;\n&nbsp;private string ms_per_day;\n&nbsp;public
  Employee()\n&nbsp;{\n&nbsp;&nbsp;vacationTime = new Vector();\n&nbsp;&nbsp;name
  = \"NAMELESS EMPLOYEE\";\n&nbsp;&nbsp;ms_per_day = 86400000;  \n&nbsp;}\n}\n</pre>
  \n\nOnce again, however, this is not the right answer.  In this solution, we have
  ms_per_day defined once for each employee. If you think about it, ms_per_day is
  the same for ALL employees- the number of milliseconds in a day doesn't ever change,
  really. \n\nSo, what we do is make the ms_per_day variable <em>static</em>.  What
  this means is that there's exactly one, shared copy of the ms_per_day variable,
  no matter how many times the class is created. \n\n<pre class=\"brush: java\">\nclass
  Employee\n{\n&nbsp;private string firstName;\n&nbsp;private string lastName;\n&nbsp;private
  Vector vacationTime;\n&nbsp;private static ms_per_day = 84600000;\n&nbsp;public
  Employee()\n&nbsp;{\n&nbsp;&nbsp;vacationTime = new Vector();\n&nbsp;&nbsp;name
  = \"NAMELESS EMPLOYEE\"; \n&nbsp;}\n}\n</pre>\n\nThe <strong>static</strong> variable
  for functions works much the same way.  Imagine that you've created a useful function
  that goes along with a class- but one that doesn't require any data from class members.
  \ \n\nLet's say that you want to display a vacation (TimeSpan) in a specific way-
  let's say, \"May 2, 2008 to May 5, 2008\" You can write the function as part of
  the class, like so:\n\n<pre class=\"brush: java\">\nclass Employee\n{\n&nbsp;private
  static DateFormat date_formatter = DateFormat.getDateInstance( DateFormat.MEDIUM
  );\n&nbsp;...\n&nbsp;public string formatTimeSpan(TimeSpan span)\n&nbsp;{\n&nbsp;&nbsp;string
  startDate = date_formatter.format( span.getStartDate() );\n&nbsp;&nbsp;string endDate
  = date_formatter.format( span.getEndDate() );\n&nbsp;&nbsp;return startDate + \"
  to \" + endDate;\n&nbsp;}\n}\n</pre> \n\nBut- if you think about it- the formatTimeSpan()
  function doesn't depend on any of the variables inside the Employee class.  If you
  have a TimeSpan you want to format, you must create at least one Employee class
  with which to format it- like so:\n\n<pre class=\"brush: java\">\nEmployee someguy
  = new Employee();\nSystem.out.print( someguy.formatTimeSpan(christmasVacation) );\n</pre>\n\nThat's
  a bit strange- why go to all of the trouble of instantiating 'someguy'? You're not
  planning on using him.  \n\nInstead, we can make the formatTimeSpan function a <strong>static</strong>
  function. \n\n<pre class=\"brush: java\">\nclass Employee\n{\n&nbsp;public static
  string formatTimeSpan(TimeSpan span)\n&nbsp;{...}\n}\n</pre>\n\nThat means that
  formatTimeSpan is just a disconnected function- it's not tied to any specific class
  data. You can call static functions without creating a class- like so: \n\n<pre
  class=\"brush: java\">\nEmployee.formatTimeSpan(christmasVacation);\n</pre>\n\nYou
  can call static class variables the same way- \n\n<pre class=\"brush: java\">\n//
  this would get the 'ms_per_day' variable we were talking about earlier.\n// except
  that 'ms_per_day' is private, so this will fail.\nEmployee.ms_per_day;  \n</pre>\n\n<h3>
  Void </h3>\n\nJava functions must specify their return value- if I wanted to create
  a function that added two integers, I would have to specify an 'int' return value,
  for example. \n\n<pre class=\"brush: java\">\npublic int add(int one, int two)\n{\n&nbsp;
  return one + two;\n}\n</pre>\n\n<strong>void</strong> is the type given to functions
  that don't return any value at all.\n\n<h3> Main </h3>\n\nThis one is simple.  When
  you run a Java console program, it looks for the 'main' function in your chosen
  class, and runs that function. \n\n<h3> Args </h3>\n\nLet's briefly talk about The
  Command Line. \n\n<h4> The Command Line </h4>\n\nMany new programmers have been
  raised in a world of Graphical User Interfaces.  All of their time is spent in Windows,
  and when they program, they program in an Integrated Development Environment like
  Visual Studio, or IDLE, or Eclipse.  \n\nMany people don't even know about The Holy
  Command Line, the One True Interface. Neal Stephenson wrote a long article about
  it, and (despite it's length), <a href=\"http://www.cryptonomicon.com/beginning.html\">You
  Should Read It</a>.  I promise you- it's worth it.  I may even acquire the paperback
  version.  It's a .txt file, so worst-comes-to-worst, you can load it on to your
  iPod and read it on the bus. \n\nWant to see a command line? You need to open a
  console. In Windows, go to the Start menu, find <em>run</em>, and type in <em>cmd</em>.
  \ On a Macintosh computer, hunt around in the <em>Applications</em> folder for <em>Utilities</em>,
  where you'll find a program called <em>Terminal</em>.\n\nIt doesn't seem like much-
  a prompt, a blinking cursor, just staring at you. \n\nFrom the command line, however,
  you can do just about anything that you could do from the Graphical User Interface.
  \n\n<blockquote>Now, I'm not going to show you how to use a command line.  Just
  trust me that you are going to have to learn.  It may seem esoteric, but it's a
  fundamental programming skill. </blockquote>  \n\nWindows XP and Vista have DOS-based
  command lines, and... well... they're just terrible to work with.  \n\nThanks to
  the fact that Mac OS X is based - through a long and arduous, albeit interesting
  history - on <a href=\"http://en.wikipedia.org/wiki/Berkeley_Software_Distribution\">BSD
  Unix</a>, it has an advanced command-line interface with many useful features. \n\nThe
  many Linux distributions are designed in such a way that you can run the whole system
  from the command-line if you want, entirely graphics-free - and, in fact, if you
  want to really get a feel for the ol' command-line, I recommend you install and
  configure a <a href=\"http://www.slackware.com/\">Slackware</a> box from scratch.
  \ It'll be a learning experience, I promise. (I do it every couple of months or
  so, but I always chicken out and end up working with Mac-Os X again in a few days-
  but I do keep a VM of Ubuntu Server Ed. running on my computer at all times, so
  I'm not <em>entirely</em> a duffer. )\n\nWhy is the command line so popular with
  programmers, and so relatively unknown by everyone else?  Why, it's simple, cap'n.
  Command line programs are much, much easier to program.  Putting something together
  with a snazzy visual interface- even a tiny little program- will probably take you
  the better part of a day to get right.  A command-line program is the sort of thing
  you can toss together in minutes.\n\nCommand-line programs are usually free, and
  often very powerful.  With 'gpg', you can manage strong cryptography, with 'git'
  you can manage a huge shared codebase, and with 'gcc' you can compile C programs.
  \ With 'grep', you can search for just about anything.  (\"G\" is a popular letter.
  It usually stands for \"GNU\" but not always.)\n\nCommand-line programs can be tied
  together and automated in ways that graphical programs just can't- Often, you can
  pipe the output of one program right into the input of another.  \n\nHere's an example
  of a simple (Mac OS X) command-line program in action:\n\n<div class=\"code\">\n$&gt;
  cd /Users/curtis/Documents/\n$&gt; cat message.txt\nHi, Curtis- \n\nI hear that
  you're coming to the party on Thursday.\nThat's awesome.\nI hope you bring Nachos.\nIf
  you don't, Lorin's going to do that thing with your head again.\nHe really loves
  the Nachos.\n</div> \n\nThe \"cd\" program takes \"/Users/curtis/Documents\" as
  an argument, and changes the current directory to \"/Users/curtis/Documents\". The
  <em>cat</em> program takes \"message.txt\" as an argument, opens \"message.txt\"
  if it exists, and prints out the contents of \"message.txt\".\n\nSee, command-line
  programs work almost exactly like functions.  They take arguments, and produce output.
  \n\nWhen you write a 'console' program- in Eclipse or Visual Studio- what you're
  writing is a command line program. It takes input, or 'arguments', and produces
  output.  That's just about all you write in University.  If you were to run one
  of your Java programs, the way that it was intended to be run (that is, without
  the huge IDE), you'd open a command-line and go ...\n\n<div class=\"code\">\n$&gt;
  cd /Users/curtis/JavaPrograms/\n$&gt; java HelloWorld.java\nHello, World!\n</div>\n\n<h3>
  Args (again) </h3>\n\nSo, the <em>string[] args</em> part of your standard Java
  program is... a string array of all of the arguments passed to the program.  \n\nLet's
  create a sample program.  Echo.\n\n<pre class=\"brush: java\">\nclass Echo\n{\n
  \ public static void main( string[] args)\n{\n&nbsp;for(int i = 0; i < args.length;
  i++ )\n&nbsp;{\n&nbsp;&nbsp;System.out.print( args[i] + \" \");\n&nbsp;}\n}\n\n}\n</pre>\n\nWhen
  we run the program, it will just return all of the arguments that it was originally
  passed. \n\n<div class=\"code\">\n$&gt; java Echo.java I like to move it move it\nI
  like to move it move it\n</div>\n\n<h3> Conclusion </h3>\n\nSo... in conclusion...
  class <a href=\"http://en.wikipedia.org/wiki/Foo\">Foo</a> { public static void
  main( string[] args ) { } } means: \n<ul>\n<li> That the function is a publicly
  viewable and usable member of \"Foo\" - as opposed to being <em>private</em>, which
  would make it invisible.</li>\n<li> That the function does not require an instantiation
  of the <em>Foo</em> class. </li>\n<li> That the function does not return any results.
  </li>\n<li> When the program is run, it will run this function and only this function.
  </li> \n<li> 'args' is a list of arguments that were passed to the program. </li>\n</ul>\n\n</ul>\n"
