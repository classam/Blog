---
title: EA Day 2, Quantity over Quality, and C++
created: '2008-05-06T19:32:20+00:00'
visible: false
categories:
- Misc
content_type: html
content: ! "Today was my second day at Electronic Arts- today was the Software Engineering
  training.  \n\nFirst off was a few hours working with source control.  At RIM, I
  would have *killed* for a few hours working with source control, but here it was
  a bit boring because I've already learned how to use it.\n\nOur host for the day
  was a question-asker.  You know the type- he asks a question (\"Does anybody know
  one thing that the art team produces?\") and then proceeds to discard all valid
  answers (\"art?\") until the crowd either manages to hit upon that one highly obscure
  word or phrase that he's looking for (\"assets?\"), or until he's been waiting for
  a good 10 minutes and nobody's managed to hit upon the answer yet.   This manages
  to fill time, make the presentation feel more interactive, and make everyone in
  the crowd wish for a swift death. \n\nLunch was okay- we were 'freed' for an hour
  around noon, so I had time to venture up to the cafeteria- which was packed to the
  gills. I suppose everybody feels a little lunchy around noonish.  I nabbed a table
  and ate some garlic-sausage and cheese sandwiches I had prepared. \n\nThe trick
  to EA, I think, is to buy breakfast (which seems cheap and fillin'), sometimes lunch
  (reasonably priced), and forego drinks (too expensive).  Being as I haven't yet
  found any water coolers, I might need to organize something on my own. Of course,
  the water coolers are probably deep within cubicle country.\n\nAfter lunch, a long
  presentation about general software development practices, EA software development
  policies, etcetera.  At one point during the orientation, we were introduced to
  the old-fashioned trifecta of software development- high quality, on time, under
  budget. (Choose two)  Our host asked us which one of those things must never be
  allowed to slip, and we all answered with the most obvious (at least to software
  craftsmen)- high quality.  I'll leave it to you to determine which one EA chose.
  \n\nWhile I understand that the only companies that are truly unflinching about
  quality are Valve and Blizzard- at the expense of running massively overbudget and
  producing games that are frequently months or years late- it still surprised me
  a little.  Blockbuster games like that are enormous financial risks- they cost millions
  to develop, may or may not and up being popular. The quality-first policy may have
  lead to Portal and Starcraft, but it's also lead to Daikatana and Duke Nukem Forever.
  \ We all know that the bottom line is king, but we're at least aware of the common
  pretension that quality is the number one priority.  Really, with EA, it's been
  clear since day one- we're not here to produce the best games in the world, we're
  here to produce truly embarassing amounts of money for executives and company shareholders,
  and in exchange, we get a decent wage, job security, and a variety of nice perks.
  \ I guess that's a way to look at things. It certainly puts a damper on the ol'
  motivation, though- the person I'm most interested in producing staggering amounts
  of money for is me.   \n\nMy motivation isn't so much the feeling of a job well
  done, but the EA Knowledge Repository, a great big resource containing just about
  everything they've written down about a variety of topics.   I'm hitting that like
  a fat kid hits cupcakes.\n\nOur last part of the day was dropping us into some C++.
  \ Here's a chunk of code that's broken- please debug it.  First, it wouldn't compile,
  and then secondly, it had a number of runtime errors. \n\nThis was a bit like jumping
  directly in to cold water.  It wasn't really C++, more straight-up C- and the last
  time I even touched code like that was over a year ago, when I was working on a
  Compiler for Shermer's 307 course.  Since then, it's been high-level programming
  languages all the way- PHP, Python, and Lisp.  Here I am, debugging a C++ program?
  It's certainly a kick to the junk. \n\nI was still refamiliarizing myself with C++
  when just about everybody else in the class had already fixed the various build
  errors.  We had an hour, and nobody fixed the program before the time was up- although
  a clever fellow next to me managed to finish about 10 minutes afterwards.  I had
  made a bit of a dent, clearing up the most obvious errors and starting to dig into
  a deeper understanding of the program in general- but left to my own devices, the
  error probably would have eluded me for at least a day as I painstakingly went over
  each function in the code trying to more completely understand why the whole thing
  seemed to be failing from what was essentially a great big logic error- or maybe
  littering the whole thing with printf statements in hopes of catching the error
  (like one would catch a rabbit).\n\n\"But why not use the debugger?\" - Ah, well,
  while I can use the Visual Studio debugger at least at it's most rudimentary, I've
  never found a good description of how to effectively debug with it. No tutorials,
  no TFM to R, no nothin'. In fact, I've found documentation & tutorials for the Visual
  Studio IDE itself pretty lacking as long as I've used it- maybe I'm missing something?
  \n\nThe whole time, I couldn't help but think that I could reduplicate the entire
  codebase in Python or PHP, bug-free, in 5-10 lines of code (read a file, line by
  line, into a hash table, then search through it) in less time that it would have
  taken to debug.  Of course, Python is entirely inappropriate for video game design,
  but it still gruffed my boxes a little bit- one of the reasons I love high-level
  programming languages so much is because I never have to deal with pointer allocation,
  memory management, or, worst of all, debugging those things.\n\nIt's also been made
  quite clear that this (while not exactly the same) is at least similar to what all
  of the other software devs are going to be doing for the next few months.  Lots
  of popular franchises relaunching soon means lots of bugs to fix. I'm really, *really*
  glad that this is not my job description for the next few months.  I don't want
  to suggest that endlessly fixing bugs is 'below me'- I'm certainly an inexperienced
  developer, just the type to get doing trenchwork like that- but it sounds like a
  pretty dull time. \n\nWell, if my job calls for it, I can speak the C++ lingo too-
  albeit a bit reluctantly- but I hope I don't have to. Even C# would be a big step
  up. "
